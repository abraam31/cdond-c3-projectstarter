version: 2.1

commands:

  exit-pipeline:
    description: exit pipeline if job fails
    steps:
      - run:
          name: exit pipeline
          when: on_fail
          command: |
            exit 1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        backendStack:
            type: string
            default: "udapeople-back-$WorkFlowID"

        frontendStack:
            type: string
            default: "udapeople-front-$WorkFlowID"
            
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-abraam-project3" --recursive
            aws cloudformation delete-stack --stack-name << parameters.backendStack >>
            aws cloudformation delete-stack --stack-name << parameters.frontendStack >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow. 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=`curl -H "Content-Type: text/plain" -H "token: 4764f73f-07a8-44fd-87ed-4fe7d5793d20" --request PUT --data "1" https://api.memstash.io/values/migration_$CIRCLE_WORKFLOW_ID`
            if(( $SUCCESS==1 )); 
            then
               cd ~/project/backend
               npm install
               npm run migrations:revert
               exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "abraam-front2"
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: 
            - frontend/src/node
          key: "abraam-front2"
      - exit-pipeline

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "backend-build1"
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build         
      - persist_to_workspace:
          root: .
          paths:
            - backend/*
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "abraam-front2"
      - run:
          name: Test front-end
          command: |
            cd frontend
            sudo npm i
            sudo npm run test
            sudo npm install oauth-sign --save
      - save_cache:
          paths: 
            - frontend//node_modules
          key: "abraam-front2"
      - exit-pipeline
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: "backend-build"
      - run: cat backend/src/modules/domain/employees/commands/handlers/employee-activator.handler.spec.ts
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: 
            - backend/src/modules
          key: backend-build
      - exit-pipeline
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend audit
          command: |
            cd frontend
            npm audit fix
      - exit-pipeline

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm audit fix 
            
      - exit-pipeline
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      - image: python:3.7-alpine3

    steps:
      - checkout
      - run: 
          name: install the tar package for the workspace step 
          command: |
            yum -y install tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-back-${CIRCLE_WORKFLOW_ID:0-7}" \
              --parameter-overrides ID="abraam-project3"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-front-${CIRCLE_WORKFLOW_ID:0-7}" \
              --parameter-overrides ID="abraam-project3" 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
          
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> .circleci/ansible/inventory.txt
            
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicDnsName' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> back_url
            
            ec2_url=`cat back_url`
            
            curl -H "Content-Type: text/plain" -H "token: 9787990f-712f-4549-8efb-7715e8abab1c" --request PUT --data $ec2_url https://api.memstash.io/values/back_url
            url=`curl -H "token: 9787990f-712f-4549-8efb-7715e8abab1c" --request GET https://api.memstash.io/values/back_url`
            echo $url 
            
      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
      - destroy-environment
                
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: ["09:1c:5a:d9:6d:5e:87:c8:30:ca:2c:bf:fc:eb:b6:65"]
      - attach_workspace:
            at: /tmp       
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat /tmp/ansible/inventory.txt
            ls 
            ls .circleci 
            ls /tmp 
            
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            touch .env
            echo -e "ENVIRONMENT=production" >> .env
            echo -e "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> .env
            echo -e "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> .env
            echo -e "NODE_ENV=production" >> .env
            echo -e "TYPEORM_HOST=$TYPEORM_HOST" >> .env
            echo -e "TYPEORM_PORT=$TYPEORM_PORT" >> .env
            echo -e "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> .env
            echo -e "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> .env 
            echo -e "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> .env
            echo -e "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> .env
            echo -e "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> .env
            echo -e VERSION=1 >> .env
            sudo npm install     
            sudo npm run build
            sudo npm run migrations > migration
            cat migration
        
      - run:
          name: Send migration results to memstash
          command: |
            #!/bin/bash
            cd backend
            cat migration
            curl -H "Content-Type: text/plain" -H "token: 4764f73f-07a8-44fd-87ed-4fe7d5793d20" --request PUT --data "1" https://api.memstash.io/values/migration_$CIRCLE_WORKFLOW_ID
      - revert-migrations
      
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text`
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL} > API_URL 
      - persist_to_workspace:
          root: .
          paths:
            - API_URL         
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=`cat API_URL`
            cd frontend
            npm i
            npm run build
            ls dist
            
      - run:
          name: copy files to s3
          command: aws s3 cp frontend/dist s3://udapeople-abraam-project3/ --recursive
      - destroy-environment
      - revert-migrations
      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:  
      - checkout
      - add_ssh_keys:
            fingerprints: ["09:1c:5a:d9:6d:5e:87:c8:30:ca:2c:bf:fc:eb:b6:65"]

      - attach_workspace:
            at: .
        
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip

      - run:
          name: compressing
          command: |
            tar cvf artifacts.tar backend/
            
      - run:
          name: Run migrations
          command: |
            touch backend/.env
            echo -e "ENVIRONMENT=production" >> backend/.env
            echo -e "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo -e "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo -e "NODE_ENV=production" >> backend/.env
            echo -e "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo -e "TYPEORM_PORT=$TYPEORM_PORT" >> backend/.env
            echo -e "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo -e "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env 
            echo -e "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo -e "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo -e "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
            echo -e VERSION=1 >> backend/.env

      - run:
          name: compressing env
          command: |
            cd backend
            tar cvf env.tar .env
            cd ..
            
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -vvv -i ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations           

  smoke-test:
    docker:
      - image: alpine
      - image: amazon/aws-cli
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - attach_workspace:
            at: /tmp            
      - run:
          name: Install dependencies
          command: |
            apk add --update tar 
            apk add --update gzip 
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            #!/bin/bash
            export API_URL="`cat /tmp/API_URL`/api/status"            
            echo "${API_URL} " > API_URL     
            
      - run:      
          name: Backend smoke test.
          command: |
            #/bin/bash
            sleep 60s
            API_URL=`cat API_URL`
            echo "${API_URL}"                  
            curl -I $API_URL
            if [[ $? -ne 0 ]]; then
                echo "api is not reachable"
                exit 1 
            fi
            
      - run:
          name: Frontend smoke test.
          command: |
            #!/bin/bash
            FRONT_URL="http://udapeople-abraam-project3.s3-website-us-east-1.amazonaws.com"
            #/bin/bash
            curl -I $FRONT_URL
            if curl -s $FRONT_URL | grep "Welcome"; then
                exit 1
            else
                exit 0
            fi                 
      - destroy-environment
      - revert-migrations
      
workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - deploy-infrastructure:
            requires:
                - build-backend
      - configure-infrastructure:
            requires:
                - deploy-infrastructure
      - run-migrations:
            requires:
                - configure-infrastructure
      - deploy-frontend:
            requires:
                - run-migrations   
      - deploy-backend:
            requires:
                - deploy-frontend
      - smoke-test:
            requires:
                - deploy-backend