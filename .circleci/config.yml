version: 2.1

commands:

  exit-pipeline:
    description: exit pipeline if job fails
    steps:
      - run:
          name: exit pipeline
          when: on_fail
          command: |
            exit 1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        backendStack:
            type: string
            default: "udapeople-back-$WorkFlowID"

        frontendStack:
            type: string
            default: "udapeople-front-$WorkFlowID"
            
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.backendStack >>
            aws cloudformation delete-stack --stack-name << parameters.frontendStack >>

jobs:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install the tar package for the workspace step 
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws --version 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-back-nncnrko" \
              --parameter-overrides ID="$WorkFlowID"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-front-$WorkFlowID" \
              --parameter-overrides ID="$WorkFlowID"   
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> .circleci/ansible/inventory.txt
            
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicDnsName' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> back_url
            
            ec2_url=`cat back_url`
            
            curl -H "Content-Type: text/plain" -H "token: 9787990f-712f-4549-8efb-7715e8abab1c" --request PUT --data $ec2_url https://api.memstash.io/values/back_url
            url=`curl -H "token: 9787990f-712f-4549-8efb-7715e8abab1c" --request GET https://api.memstash.io/values/back_url`
            echo $url 
            
      - persist_to_workspace:
          root: .circleci
          paths:
            - ansible/inventory.txt
            
      - attach_workspace:
            at: /tmp

      - run:
            name: cat host file 
            command: |
                ls -a /tmp 
                echo #####
                cat /tmp/.circleci/ansible/inventory.txt
      - destroy-environment
           

workflows:
  default:
    jobs:
      - deploy-infrastructure
